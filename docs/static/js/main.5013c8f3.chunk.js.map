{"version":3,"sources":["components/Display.js","components/Key.js","components/Keyboard.js","logic/operate.js","objects/DataObject.js","components/Calculator.js","logic/calculate.js","App.js","reportWebVitals.js","index.js"],"names":["Display","props","className","data","total","operation","next","construct","Key","value","type","indexOf","getClassName","onClick","e","onKeyClick","target","innerHTML","handleClick","Keyboard","keyValues","useMemo","map","keyValue","onKeyboardClick","operate","numberOne","numberTwo","one","Big","two","plus","toString","minus","times","c","join","div","mod","Error","DataObject","this","Calculator","useState","dataObject","setDataObject","key","obj","buttonName","match","includes","parseFloat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5013c8f3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Display = (props) => {\n  const construct = () => {\n    const { data: { total, operation, next } } = props;\n\n    return `\n      ${(total || next)\n      + (operation || '')\n      + ((operation && next) || '')}`;\n  };\n\n  return (\n    <span className=\"display\">\n      {construct()}\n    </span>\n  );\n};\n\nDisplay.propTypes = {\n  data: PropTypes.shape({\n    total: PropTypes.string,\n    operation: PropTypes.string,\n    next: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Display;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Key = (props) => {\n  const { value } = props;\n\n  const handleClick = (e) => {\n    props.onKeyClick(e.target.innerHTML);\n  };\n\n  const getClassName = () => {\n    let className;\n\n    if (value === '0') {\n      className = 'span-two-col';\n    } else if (['/', 'x', '-', '+', '='].indexOf(value) > -1) {\n      className = 'bg-orange';\n    }\n\n    return className;\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={getClassName()}\n      onClick={(e) => handleClick(e)}\n    >\n      {value}\n    </button>\n  );\n};\n\nKey.propTypes = {\n  value: PropTypes.string.isRequired,\n  onKeyClick: PropTypes.func.isRequired,\n};\n\nexport default Key;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Key from './Key';\n\nconst Keyboard = (props) => {\n  const keyValues = ['AC', '+/-', '%', '/', '7', '8', '9', 'x', '4', '5', '6', '-', '1', '2', '3', '+', '0', '.', '='];\n\n  const handleClick = (keyValue) => {\n    props.onKeyboardClick(keyValue);\n  };\n\n  const renderOutput = useMemo(() => (\n    <div className=\"keyboard\">\n      {keyValues.map((keyValue) => (\n        <Key\n          value={keyValue}\n          key={keyValue}\n          onKeyClick={(keyValue) => handleClick(keyValue)}\n        />\n      ))}\n    </div>\n  ));\n\n  return renderOutput;\n};\n\nKeyboard.propTypes = {\n  onKeyboardClick: PropTypes.func.isRequired,\n};\n\nexport default Keyboard;\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === '/') {\n    const isZero = (two.c.join('') === '0');\n    return ((isZero && 'Undefined') || one.div(two).toString());\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","export default class DataObject {\n  constructor() {\n    this.total = '0';\n    this.next = null;\n    this.operation = null;\n  }\n}\n","import React, { useState } from 'react';\nimport Display from './Display';\nimport Keyboard from './Keyboard';\nimport calculate from '../logic/calculate';\nimport DataObject from '../objects/DataObject';\n\nconst Calculator = () => {\n  const [dataObject, setDataObject] = useState(() => new DataObject());\n\n  const handleClick = (key) => {\n    setDataObject((dataObject) => ({ ...dataObject, ...calculate(dataObject, key) }));\n  };\n\n  return (\n    <div className=\"calculator\">\n      <Display data={{ ...dataObject }} />\n      <Keyboard onKeyboardClick={(key) => handleClick(key)} />\n    </div>\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: '0',\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    // if (buttonName === '0' && obj.next === '0') {\n    //   console.log('0');\n    //   return {\n    //     total: '0',\n    //     next: null,\n    //     operation: null,\n    //   };\n    // }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation && obj.next) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import './App.scss';\nimport React from 'react';\nimport Calculator from './components/Calculator';\n\nconst App = () => (\n  <div className=\"App\">\n    <Calculator />\n  </div>\n);\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}