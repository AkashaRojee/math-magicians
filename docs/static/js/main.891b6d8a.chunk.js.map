{"version":3,"sources":["components/Display.js","components/Key.js","components/Keyboard.js","logic/operate.js","objects/DataObject.js","components/Calculator.js","logic/calculate.js","App.js","reportWebVitals.js","index.js"],"names":["Display","props","state","this","data","total","operation","next","className","construct","Component","Key","e","onKeyClick","target","innerHTML","value","indexOf","type","onClick","handleClick","Keyboard","key","onKeyboardClick","map","operate","numberOne","numberTwo","one","Big","two","plus","toString","minus","times","c","join","div","mod","Error","DataObject","Calculator","dataObject","setState","obj","buttonName","match","includes","parseFloat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.891b6d8a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  construct() {\n    const { data: { total, operation, next } } = this.props;\n    return `\n      ${(total || next)\n      + (operation || '')\n      + ((operation && next) || '')}`;\n  }\n\n  render() {\n    return (\n      <span className=\"display\">\n        {this.construct()}\n      </span>\n    );\n  }\n}\n\nDisplay.propTypes = {\n  data: PropTypes.shape({\n    total: PropTypes.string,\n    operation: PropTypes.string,\n    next: PropTypes.string,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Key extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleClick(e) {\n    const { props } = this;\n    props.onKeyClick(e.target.innerHTML);\n  }\n\n  render() {\n    const { value } = this.props;\n\n    let className;\n    if (value === '0') {\n      className = 'span-two-col';\n    } else if (['/', 'x', '-', '+', '='].indexOf(value) > -1) {\n      className = 'bg-orange';\n    }\n\n    return (\n      <button type=\"button\" className={className} onClick={(e) => this.handleClick(e)}>\n        {value}\n      </button>\n    );\n  }\n}\n\nKey.propTypes = {\n  value: PropTypes.string.isRequired,\n  onKeyClick: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Key from './Key';\n\nexport default class Keyboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleClick(key) {\n    const { props } = this;\n    props.onKeyboardClick(key);\n  }\n\n  render() {\n    const keyValues = ['AC', '+/-', '%', '/', '7', '8', '9', 'x', '4', '5', '6', '-', '1', '2', '3', '+', '0', '.', '='];\n\n    return (\n      <div className=\"keyboard\">\n        {keyValues.map((key) => (\n          <Key\n            value={key}\n            key={key}\n            onKeyClick={(key) => this.handleClick(key)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nKeyboard.propTypes = {\n  onKeyboardClick: PropTypes.func.isRequired,\n};\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === '/') {\n    const isZero = (two.c.join('') === '0');\n    return ((isZero && 'Undefined') || one.div(two).toString());\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","export default class DataObject {\n  constructor() {\n    this.total = '0';\n    this.next = null;\n    this.operation = null;\n  }\n}\n","import React, { Component } from 'react';\nimport Display from './Display';\nimport Keyboard from './Keyboard';\nimport calculate from '../logic/calculate';\nimport DataObject from '../objects/DataObject';\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataObject: new DataObject(),\n    };\n  }\n\n  handleClick(key) {\n    this.setState((state) => ({\n      dataObject: { ...state.dataObject, ...calculate(state.dataObject, key) },\n    }));\n  }\n\n  render() {\n    const { dataObject } = this.state;\n\n    return (\n      <div className=\"calculator\">\n        <Display data={{ ...dataObject }} />\n        <Keyboard onKeyboardClick={(key) => this.handleClick(key)} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: '0',\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    // if (buttonName === '0' && obj.next === '0') {\n    //   console.log('0');\n    //   return {\n    //     total: '0',\n    //     next: null,\n    //     operation: null,\n    //   };\n    // }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation && obj.next) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Calculator from './components/Calculator';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}